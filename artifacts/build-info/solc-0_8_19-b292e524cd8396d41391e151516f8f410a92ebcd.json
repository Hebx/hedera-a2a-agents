{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_19-b292e524cd8396d41391e151516f8f410a92ebcd",
  "solcVersion": "0.8.19",
  "solcLongVersion": "0.8.19+commit.7dd6d404",
  "userSourceNameMap": {
    "contracts/SimpleSupplyChain.sol": "project/contracts/SimpleSupplyChain.sol",
    "contracts/SupplyChainAgreement.sol": "project/contracts/SupplyChainAgreement.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "paris",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/SimpleSupplyChain.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * Simple Supply Chain Contract\n * Demonstrates deployed contract on Hedera\n */\ncontract SimpleSupplyChain {\n    string public greeting;\n    address public buyer;\n    address public vendor;\n    uint256 public price;\n    uint256 public quantity;\n    bool public deployed;\n    \n    constructor(string memory _greeting) {\n        greeting = _greeting;\n        deployed = true;\n    }\n    \n    function getDetails() public view returns (\n        string memory _greeting,\n        bool _deployed\n    ) {\n        return (greeting, deployed);\n    }\n}\n\n"
      },
      "project/contracts/SupplyChainAgreement.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * Supply Chain Agreement Smart Contract\n * \n * This contract implements autonomous supply chain negotiations\n * deployed on Hedera EVM. It manages escrow, delivery confirmation,\n * and automatic fund release.\n */\ncontract SupplyChainAgreement {\n    address public buyer;\n    address public vendor;\n    \n    struct Terms {\n        uint256 pricePerUnit;\n        uint256 quantity;\n        uint256 deliveryDeadline;\n        uint256 paymentScheduleDays;\n        uint256 warrantyMonths;\n        uint256 totalValue;\n    }\n    \n    Terms public terms;\n    uint256 public depositAmount;\n    bool public deliveryConfirmed;\n    bool public fundsReleased;\n    \n    event AgreementCreated(\n        address indexed buyer,\n        address indexed vendor,\n        uint256 totalValue,\n        uint256 timestamp\n    );\n    \n    event DeliveryConfirmed(\n        address indexed confirmer,\n        uint256 timestamp\n    );\n    \n    event FundsReleased(\n        address indexed vendor,\n        uint256 amount,\n        uint256 timestamp\n    );\n    \n    event Refunded(\n        address indexed recipient,\n        uint256 amount,\n        uint256 timestamp\n    );\n    \n    /**\n     * Constructor - Creates agreement with negotiated terms\n     */\n    constructor(\n        address _buyer,\n        address _vendor,\n        uint256 _pricePerUnit,\n        uint256 _quantity,\n        uint256 _deliveryDeadline,\n        uint256 _paymentScheduleDays,\n        uint256 _warrantyMonths\n    ) payable {\n        require(_buyer != address(0), \"Buyer address required\");\n        require(_vendor != address(0), \"Vendor address required\");\n        require(_pricePerUnit > 0, \"Price must be greater than 0\");\n        require(_quantity > 0, \"Quantity must be greater than 0\");\n        \n        buyer = _buyer;\n        vendor = _vendor;\n        \n        uint256 totalValue = _pricePerUnit * _quantity;\n        terms = Terms({\n            pricePerUnit: _pricePerUnit,\n            quantity: _quantity,\n            deliveryDeadline: _deliveryDeadline,\n            paymentScheduleDays: _paymentScheduleDays,\n            warrantyMonths: _warrantyMonths,\n            totalValue: totalValue\n        });\n        \n        depositAmount = msg.value;\n        require(depositAmount >= totalValue, \"Insufficient deposit\");\n        \n        emit AgreementCreated(buyer, vendor, totalValue, block.timestamp);\n    }\n    \n    /**\n     * Confirm delivery - Called by buyer after receiving goods\n     */\n    function confirmDelivery() external {\n        require(msg.sender == buyer, \"Only buyer can confirm delivery\");\n        require(block.timestamp <= terms.deliveryDeadline || block.timestamp <= terms.deliveryDeadline + 86400, \"Delivery deadline passed\");\n        require(!deliveryConfirmed, \"Delivery already confirmed\");\n        \n        deliveryConfirmed = true;\n        emit DeliveryConfirmed(msg.sender, block.timestamp);\n    }\n    \n    /**\n     * Release funds - Called after delivery confirmation and payment schedule\n     */\n    function releaseFunds() external {\n        require(deliveryConfirmed, \"Delivery not confirmed\");\n        require(!fundsReleased, \"Funds already released\");\n        \n        // Check payment schedule (wait for paymentScheduleDays after delivery)\n        require(block.timestamp >= terms.deliveryDeadline + terms.paymentScheduleDays * 1 days, \"Payment schedule not met\");\n        \n        fundsReleased = true;\n        \n        // Transfer funds to vendor\n        (bool success, ) = payable(vendor).call{value: depositAmount}(\"\");\n        require(success, \"Transfer failed\");\n        \n        emit FundsReleased(vendor, depositAmount, block.timestamp);\n    }\n    \n    /**\n     * Refund buyer if delivery deadline passed without confirmation\n     */\n    function refund() external {\n        require(!deliveryConfirmed, \"Cannot refund after delivery\");\n        require(block.timestamp > terms.deliveryDeadline + 7 days, \"Grace period not passed\");\n        require(!fundsReleased, \"Funds already released\");\n        \n        (bool success, ) = payable(buyer).call{value: depositAmount}(\"\");\n        require(success, \"Refund failed\");\n        \n        emit Refunded(buyer, depositAmount, block.timestamp);\n    }\n    \n    /**\n     * Get contract balance\n     */\n    function getBalance() external view returns (uint256) {\n        return address(this).balance;\n    }\n    \n    /**\n     * Get contract status\n     */\n    function getStatus() external view returns (\n        bool _deliveryConfirmed,\n        bool _fundsReleased,\n        uint256 _balance\n    ) {\n        return (deliveryConfirmed, fundsReleased, address(this).balance);\n    }\n}\n\n"
      }
    }
  }
}